---
title: "Joining data"
subtitle: "Lecture 7"
date: "May 23, 2024"
format: 
  revealjs:
    self-contained: true
    footer: "[🔗 sta199-summer24.github.io](https://sta199-s24.github.io/) &nbsp;·&nbsp; [❓ Ask on Ed](https://edstem.org/us/courses/59071/discussion/)"
editor_options: 
  chunk_output_type: console
execute: 
  echo: true
---


## Announcements

- No late work is accepted. Always turn something in! You can use the code chunk option `#| eval: FALSE` or (worst case scenario) turn in the .qmd file if your PDF won't render.

- The AEs are very similar to labs. If you can’t recall how to do something, return to the AE!

- **Render after every question** and don’t go on to the next question if you aren’t able to render- fix the problem first

- Let's go over Lab 2, Q6a - don't overwrite the dataset!



## Options for a tibble {.smaller}

::: panel-tabset
## Default

```{r}
#| message: false

library(tidyverse)
midwest
```

## `slice()`

```{r}
midwest |>
  slice(1:13)
```

## `select()`

```{r}
midwest |>
  select(county, state, percbelowpoverty, percollege)
```

## `relocate()`

```{r}
midwest |>
  relocate(county, state, percbelowpoverty, percollege)
```
:::

## Recap: pivoting {.smaller}

::: incremental
-   Data sets can't be labeled as *wide* or *long* but they can be made *wider* or *longer* for a certain analysis that requires a certain format
-   When pivoting longer, variable names that turn into values are characters by default. If you need them to be in another format, you need to explicitly make that transformation, which you can do so within the `pivot_longer()` function.
-   You can tweak a plot forever, but at some point the tweaks are likely not very productive. However, you should always be critical of defaults (however pretty they might be) and see if you can improve the plot to better portray your data / results / what you want to communicate.
:::

# Joining datasets

## Why join? {.smaller}

Suppose we want to answer questions like:

> Is there a relationship between\
> - number of QS courses taken\
> - having scored a 4 or 5 on the AP stats exam\
> - motivation for taking course\
> - ...\
> and performance in this course?"

. . .

Each of these would require *join*ing class performance data with an outside data source so we can have all relevant information (columns) in a single data frame.

## Setup

For the next few slides...

::: columns
::: {.column width="50%"}
```{r}
x <- tibble(
  id = c(1, 2, 3),
  value_x = c("x1", "x2", "x3")
  )

x
```
:::

::: {.column width="50%"}
```{r}
y <- tibble(
  id = c(1, 2, 4),
  value_y = c("y1", "y2", "y4")
  )

y
```
:::
:::

## `left_join()`

::: columns
::: {.column width="50%"}
![](images/left-join.gif)
:::

::: {.column width="50%"}
```{r}
left_join(x, y)
```
:::
:::

## `right_join()`

::: columns
::: {.column width="50%"}
![](images/right-join.gif)
:::

::: {.column width="50%"}
```{r}
right_join(x, y)
```
:::
:::

## `full_join()`

::: columns
::: {.column width="50%"}
![](images/full-join.gif)
:::

::: {.column width="50%"}
```{r}
full_join(x, y)
```
:::
:::

## `inner_join()`

::: columns
::: {.column width="50%"}
![](images/inner-join.gif)
:::

::: {.column width="50%"}
```{r}
inner_join(x, y)
```
:::
:::

## `semi_join()`

::: columns
::: {.column width="50%"}
![](images/semi-join.gif)
:::

::: {.column width="50%"}
```{r}
semi_join(x, y)
```
:::
:::

## `anti_join()`

::: columns
::: {.column width="50%"}
![](images/anti-join.gif)
:::

::: {.column width="50%"}
```{r}
anti_join(x, y)
```
:::
:::

# Example: Passenger capacity

## `nycflights13` & airport capacity {.smaller}

You've previously seen the `flights` data available in the `nycflights13` package which details all flights from one of the 3 major NYC airports in 2013.

Today we would like to answer a specific question:

::: question
What was the passenger capacity (i.e., maximum number of passengers) that could have flown out of the three airports in 2013?
:::

. . .

To answer this we will need to know how many passenger seats each plane had available - each flight record has a `tailnum` which is a unique identifier for the plane, this can be linked to the `planes` data set which has the number of available seats for each plane.

## Attempt 1

```{r}
#| output-location: fragment
library(nycflights13)

left_join(flights, planes) |>
  group_by(origin) |>
  summarize(capacity = sum(seats))
```

## Attempt 2

```{r}
#| output-location: fragment
left_join(flights, planes) |>
  group_by(origin) |>
  summarize(capacity = sum(seats, na.rm = TRUE))
```

## Attempt 3

```{r}
#| output-location: fragment
left_join(
  flights, planes,
  by = c("tailnum" = "tailnum")
) |>
  group_by(origin) |>
  summarize(capacity = sum(seats, na.rm = TRUE))
```

# Application exercise

## Goal

Make a bar plot of total populations of continents, where the input data are:

1.  Countries and populations
2.  Countries and continents

## `ae-06-population-joining`

::: appex
-   Go to the project navigator in RStudio (top right corner of your RStudio window) and open the project called `ae`.

-   If there are any uncommitted files, commit them, and then click **Pull**.

-   Open the file called `ae-06-population-joining.qmd` and render it.
:::
