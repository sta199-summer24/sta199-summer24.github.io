---
title: "AE 06: Joining country populations with continents"
subtitle: "Suggested answers"
categories: 
  - Application exercise
  - Answers
---

::: callout-important
These are suggested answers.
This document should be used as reference only, it's not designed to be an exhaustive key.
:::

## Goal

Our ultimate goal in this application exercise is to create a bar plot of total populations of continents, where the input data are:

1.  Countries and populations
2.  Countries and continents

```{r}
#| message: false

library(tidyverse) # for data wrangling and visualization
library(scales)    # for pretty axis breaks
```

## Data

### Countries and populations

These data come from [The World Bank](https://data.worldbank.org/indicator/SP.POP.TOTL) and reflect population counts as of 2022.

```{r}
#| label: load-population-data
#| message: false

population <- read_csv("https://sta199-s24.github.io/data/world-pop-2022.csv")
```

Let's take a look at the data.

```{r}
#| label: view-population-data

population
```

### Continents

These data come from [Our World in Data](https://ourworldindata.org/grapher/continents-according-to-our-world-in-data).

```{r}
#| label: load-continents-data
#| message: false

continents <- read_csv("https://sta199-s24.github.io/data/continents.csv")
```

Let's take a look at the data.

```{r}
#| label: view-continents-data

continents
```

## Exercises

-   **Think out loud:**

    -   Which variable(s) will we use to join the `population` and `continents` data frames?

    `country` from `population` and `entity` from `continents`

    -   We want to create a new data frame that keeps all rows and columns from `population` and brings in the corresponding information from `continents`. Which join function should we use?

    `left_join()` with `population` on the left.

-   **Demo:** Join the two data frames and name assign the joined data frame to a new data frame `population_continents`.

```{r}
#| label: join-population-continents

population_continent <- population |>
  left_join(continents, by = join_by(country == entity))
```

-   **Demo:** Take a look at the newly created `population_continent` data frame. There are some countries that were not in `continents`. First, identify which countries these are (they will have `NA` values for `continent`).

```{r}
#| label: data-inspect

population_continent |>
  filter(is.na(continent))
```

-   **Demo:** All of these countries are actually in the `continents` data frame, but under different names. So, let's clean that data first by updating the country names in the `population` data frame in a way they will match the `continents` data frame, and then joining them, using a `case_when()` statement in `mutate()`. At the end, check that all countries now have continent information.

```{r}
#| label: data-clean

population_continent <- population |>
  mutate(country = case_when(
    country == "Congo, Dem. Rep." ~ "Democratic Republic of Congo",
    country == "Congo, Rep." ~ "Congo",
    country == "Hong Kong SAR, China" ~ "Hong Kong",
    country == "Korea, Dem. People's Rep." ~ "North Korea",
    country == "Korea, Rep." ~ "South Korea",
    country == "Kyrgyz Republic" ~ "Kyrgyzstan",
    .default = country
    )
  ) |>
  left_join(continents, by = join_by(country == entity))

population_continent |>
  filter(is.na(continent))
```

-   **Think out loud:** Which continent do you think has the highest population? Which do you think has the second highest? The lowest?

Add your response here.

-   **Demo:** Create a new data frame called `population_summary` that contains a row for each continent and a column for the total population for that continent, in descending order of population. Note that the function for calculating totals in R is `sum()`.

```{r}
#| label: population-continents-sum

population_summary <- population_continent |>
  group_by(continent) |>
  summarize(total_pop = sum(population)) |>
  arrange(desc(total_pop))
```

-   **Your turn:** Make a bar plot with total population on the y-axis and continent on the x-axis, where the height of each bar represents the total population in that continent.

```{r}
#| label: population-summary-bar

ggplot(population_summary, aes(x = continent, y = total_pop)) +
  geom_col()
```

-   **Your turn:** Recreate the following plot, which is commonly referred to as a **lollipop plot**. Hint: Start with the points, then try adding the `segment`s, then add axis labels and `caption`, and finally, as a stretch goal, update the x scale (which will require a function we haven't introduced in lectures or labs yet!).

![](https://sta199-s24.github.io/images/population-summary-lollipop.png)

```{r}
#| label: population-summary-lollipop
#| fig-asp: 0.4

ggplot(population_summary, aes()) +
  geom_point(aes(x = total_pop, y = continent)) +
  geom_segment(aes(y = continent, yend = continent, x = 0, xend = total_pop)) +
  scale_x_continuous(labels = label_number(scale = 1/1000000, suffix = " bil")) +
  theme_minimal() +
  labs(
    x = "Total population",
    y = "Continent",
    title = "World population",
    subtitle = "As of 2022",
    caption = "Data sources: The World Bank and Our World in Data"
  )
```

-   **Think out loud:** What additional improvements would you like to make to this plot.

Answers may vary.
Ordering the continents in decreasing order of population.
